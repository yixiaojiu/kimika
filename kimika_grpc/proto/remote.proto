syntax = "proto3";
package remote;

service Remote {

	rpc RegisterReceiver(RegisterReceiverRequest) returns (RegisterReceiverResponse);

	rpc RegisterContent(RegisterContentRequest) returns (RegisterContentResponse);

	rpc GetContent(GetContentRequest) returns (stream GetContentReponse);

	rpc GetReceivers(EmptyRequest) returns (stream GetReceiversResponse);

	rpc ChooseReceiver(ChooseReceiverRequest) returns (stream ChooseReceiverResponse);

	rpc Send(stream TransferContent) returns (EmptyResponse);

	rpc Receive(ReceiveRequest) returns (stream TransferContent);
}

message EmptyRequest {
}

message EmptyResponse {
}

message RegisterReceiverRequest {
	string alias = 1;
}

message RegisterReceiverResponse {
	string receiver_id = 1;
}

message RegisterContentResponse {
	string content_id = 1;
	string sender_id = 2;
}

enum Type {
	FILE = 0;
	MESSAGE = 1;
}

message RegisterContentRequest {
	Type content_type = 1;

	// sender alias
	string alias = 2;

	optional uint64 size = 3;

	optional string name = 4;
}

message GetContentRequest {
	// receiver id
	string receiver_id = 1;
}

message GetContentReponse {
	message Content {
		Type content_type = 1;

		// sender alias
		string alias = 2;

		string ip = 3;

		string sender_id = 4;

		string content_id = 5;

		optional uint64 size = 6;

		optional string name = 7;
	}

	repeated Content content_list = 1;
}

message GetReceiversResponse {
	message Receiver {
		string alias = 1;
		string ip = 2;
		string receiver_id = 3;
	}

	repeated Receiver receivers = 1;
}

message ChooseReceiverRequest {
	string receiver_id = 1;

	string sender_id = 2;
}

message ChooseReceiverResponse {
	string content_id = 1;

	string receiver_id = 2;
}

message TransferContent {
	bytes data = 1;
	repeated int64 range = 2;
}

message ReceiveRequest {
	string receiver_id = 1;

	string content_id = 2;
}
